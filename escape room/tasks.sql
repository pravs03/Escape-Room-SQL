
#VIEWS:

--  VIEW 1 Combines both esc_room and pricing table so we can view the options availble at the escape room. -- 
CREATE VIEW options_prices AS
    SELECT 
        E.Room_Name AS 'Room Name',
        E.Description AS 'Description',
        E.Difficulty AS 'Difficulty',
        E.Theme AS 'Theme',
        E.Max_Players AS 'Max.Players',
        E.Duration AS 'Duration (Mins)',
        P.Price_PP AS 'Price (£)'
    FROM
        esc_room E
            INNER JOIN
        pricing P ON E.Room_ID = P.Room_ID
    ORDER BY Price_PP; -- shows lowest to highest priced

SELECT * FROM options_prices;  -- gives us a view of whats room is available at the escape room. 


-- VIEW 2 shows a summary of each escapes room's performance -- 
CREATE VIEW room_performance AS
    SELECT 
        E.Room_ID,
        E.Room_Name AS 'Room Name',
        COUNT(DISTINCT S.Session_ID) AS 'Total Sessions',
        
        SUM(CASE
            WHEN S.Result = 'Success' THEN 1
            ELSE 0
        END) AS 'Successful Escape',
        
        (SELECT 
                ROUND(AVG(SP.Completion_Time), 2)
            FROM
                session_puzzles SP
            WHERE
                SP.Session_ID IN (SELECT 
                        Session_ID
                    FROM
                        sessions
                    WHERE
                        sessions.Room_ID = E.Room_ID)) AS 'ACT',
        
        ROUND((SUM(CASE
                    WHEN S.RESULT = 'Success' THEN 1
                    ELSE 0
                END) * 100 / COUNT(S.Session_ID)),
                2) AS 'Escape Rate'
    FROM
        esc_room E
            LEFT JOIN
        sessions S ON E.Room_ID = S.Room_ID
    GROUP BY E.Room_ID , E.Room_Name;
    
    SELECT * FROM room_performance; -- gives a view of the performance of each escape room. From the view can assume which one is more common, or if a escape room is too hard for people to enjoy etc. 
    

#STORED FUNCTIONS 

-- Function 1: Calculates total renevue generated by a specific room -- 
DELIMITER //

CREATE FUNCTION calculate_total_revenue(escaperoomID INT)
RETURNS DECIMAL(8,2)
DETERMINISTIC
BEGIN
    DECLARE total_revenue DECIMAL(8,2);

SELECT 
    SUM(P.Price_PP * (SELECT 
            COUNT(*)
        FROM
            team_members TM
        WHERE
            TM.Session_ID = S.Session_ID))
INTO total_revenue FROM
    sessions S
        INNER JOIN
    pricing P ON S.Room_ID = P.Room_ID
WHERE
    S.Room_ID = escaperoomID;

    RETURN total_revenue;
END //

DELIMITER ;

#How much revenue is each escape room making in total? 
SELECT calculate_total_revenue(1) AS 'The Detective Office - Total Revenue (£)'; 
SELECT calculate_total_revenue(2) AS 'The Bank Heist - Total Revenue (£)';
SELECT calculate_total_revenue(3) AS 'The Prison Break - Total Revenue (£)';
SELECT calculate_total_revenue(4) AS 'The Secret Laboratory - Total Revenue (£)';
-- OUTPUTS -- Can assume from the outputs which one is more popular/in demand. If it's worth expanding? 
-- -- The Detective Office - £240
-- -- The Bank Heist - £150
-- -- The Prison Break - £60
-- -- The Secret Laboratory - £350

#The total revenue from highest to lowest
-- organises the above data into a table rather than executing line by line.
SELECT 
    E.Room_ID,
    E.Room_Name,
    calculate_total_revenue(E.Room_ID) AS total_revenue
FROM
    esc_room E
ORDER BY total_revenue DESC; 


#Query's

-- Query 1: Identify the top players who have participated in the most successful escape room sessions. --
SELECT 
    P.Player_ID, P.First_Name, P.Last_Name, successful_sessions
FROM
    players P
        INNER JOIN
    (SELECT 
        Player_ID, COUNT(*) AS successful_sessions
    FROM
        team_members TM
    JOIN sessions s ON TM.Session_ID = S.Session_ID
    WHERE
        S.Result = 'Success'
    GROUP BY TM.Player_ID) AS subquery ON P.Player_ID = subquery.Player_ID
ORDER BY successful_sessions DESC;
-- OUTPUT:
-- --From the DB we can see Pete has won more successful escape rooms then the others, with 3 successful escapes.
 
 
 -- Query 2: Identify players, with contact information, who have played The Bank Heist Escape Room. --
SELECT 
    P.First_Name, P.Last_Name, P.Email_Address
FROM
    players P
        INNER JOIN
    team_members TM ON P.Player_ID = TM.Player_ID
WHERE
    TM.Session_ID IN (SELECT 
            Session_ID
        FROM
            sessions
        WHERE
            Room_ID = (SELECT 
                    Room_ID
                FROM
                    esc_room
                WHERE
                    Room_Name = 'The Bank Heist')); -- Change Room_name to identify players from other rooms.
-- OUTPUT:
-- -- 6 Players First_Name, Last_Name & Email_Address


#PROCEDURE
-- Procedure 1: Helps identify which session a specific team did. --
-- RL CASE: If there was a need to contact a player in case they had left anything behind, or if there was some damages they caused.

DELIMITER //

CREATE PROCEDURE teams_session_details(IN teamName VARCHAR(25))
BEGIN
	SELECT
		S.Session_ID,
        S.Team_Name AS 'Team',
        S.Start_Time AS 'Start Time',
        S.End_Time AS 'End Time',
        S.Result AS 'Results',
        R.Room_Name AS'Escape Room',
        R.Description AS 'Description', 
        R.Difficulty AS 'Difficulty',
        R.Theme AS 'Theme'
	FROM 
		sessions S
	INNER JOIN 
		esc_room R ON S.Room_ID = R.Room_ID
	WHERE 
		S.Team_Name = teamName;
END // 

DELIMITER ;

CALL teams_session_details('The Sleuth Squad');
CALL teams_session_details('Mystery Mavericks');



#EVENT (SEMI-WORKING)
-- Event: Create an event that archives old sessions to an archive table daily. --
-- RL CASE: Personal data gets deleted after 90 days!

# Create the Archive Table
CREATE TABLE session_archive (
    Session_ID INT PRIMARY KEY,
    ROOM_ID INT,
    Team_Name VARCHAR(25),
    Start_Time DATETIME,
    End_Time DATETIME,
    Result VARCHAR(20)
);
    
# Create the Event 
DELIMITER //

CREATE EVENT archive_old_sessions ON SCHEDULE EVERY 1 DAY
STARTS CURRENT_TIMESTAMP 
DO 
BEGIN
	INSERT INTO session_archive (Session_ID, Room_ID, Team_Name, Start_Time, End_Time, Result)
    SELECT Session_ID, Room_ID, Team_Name, Start_Time, End_Time, Result FROM sessions
    WHERE Start_Time < DATE_SUB(NOW(), INTERVAL 90 DAY);
    
	DELETE FROM sessions 
    WHERE Start_Time < DATE_SUB(NOW(), INTERVAL 90 DAY);
END;

DELIMITER ;

# Enable Event Scheduler -- **TURN ON FOR DEMO**
SET GLOBAL event_scheduler = ON;

# Will it work? 
INSERT INTO sessions (Session_ID, Room_ID, Team_Name, Start_Time, End_Time, Result)
VALUES
(11, 1, 'Filler 1', '2023-01-01 10:30:00', '2023-01-01 11:30:00', 'Success'),
(12, 2, 'Filler 2', '2023-01-02 10:30:00', '2023-01-02 11:30:00', 'Failed'),
(13, 3, 'Filler 3', '2024-06-01 10:30:00', '2024-06-01 11:15:00', 'Success'),
(14, 4, 'Filler 4', '2024-06-02 10:30:00', '2024-06-02 11:30:00', 'Failed');

SELECT * FROM sessions;
SELECT * FROM session_archive;  -- 

SHOW EVENTS;


